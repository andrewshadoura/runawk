======================================================================
Version 0.12.0, by Aleksey Cheusov, Mon,  3 Mar 2008 23:04:10 +0200

    new directive '#env' is implemented.
    It sets environment for running awk subprocess using setenv(3)

          Example:

             #!/usr/local/bin/runawk

             #env "LC_ALL=C"

             $1 ~ /^[A-Z]+$/ { # A-Z is valid if LC_CTYPE=C
                 print $1
             }

    New modules

      match_br.awk

	 match_br(STRING, BR_OPEN, BR_CLOSE)
	 return start position (or zero if failure) of the substring
	 surrounded by balanced (), [], {} or similar characters
	 Also sets RSTART and RLENGTH variables just like
	 the standard 'match' function does

	 For example:
	 print match_br("A (B (), C(D,C,F (), 123))", "(", ")")
	 print RSTART, RLENGTH
	 -| 3
	 -| 3
	 -| 24

      braceexpand.awk

         braceexp(STRING)
           implement shell-like brace expansion

         For example:
             print braceexpand("ab{,22{,7,8}}z{8,9}")
             -| abz8 abz9 ab22z8 ab22z9 ab227z8 ab227z9 ab228z8 ab228z9


      exitnow.awk

         see the code. exitnow.awk is used by alt_assert.awk and
         abort.awk

      abort.awk

         abort(MSG, EXIT_STATUS) -- print MSG to stderr and exits
         program with EXIT_STATUS.  if EXIT_STATUS is zero of is not
         specified, 1 is assigned.

      dirname.awk

         similar to UNIX's dirname(1)

      basename.awk

         similar to UNIX's basename(1)

      xgetline.awk

         xgetline0([FILE])

           Safe analog to 'getline < FILE' or 'getline' (if no FILE
           is specified).  0 at the end means that input line is
           assigned to $0.

         xgetline([FILE])
           Safe analog to 'getline __input < FILE' and 'getline __input'
           (if no FILE is specified)

         In both cases "safe" means that returned value is analysed
         and if it is less than zero (file reading error happens)
         program will be terminated emmidiately with appropriate error
         message printed to stderr.  Both functions return zero if end
         of file is reached or non-zero if reading was sucessfull.

         Example:
         while (xgetline("/etc/passwd")){
             print "user: " __input
         }

      xclose.awk
      xsystem.awk -- safe wrappers over 'close' and 'system' functions

======================================================================
Version 0.11.0, by Aleksey Cheusov, Sat,  9 Feb 2008 17:35:59 +0200

    New modules

      tokenre.awk:

         By default AWK splits input strings into tokens according to regular
         expression that defines "space" between tokens using special
         variable FS. In many situations it is more useful to define regular
         expressions for tokens themselves. This is what this module does.

         tokenre(STRING, REGEXP)
         `tokenre' extracts substrings from STRING
         according to REGEXP from the left to the right and assigns $1, $2
         etc. and NF variable.

         tokenre0(REGEXP)
         Does the the same as `tokenre' but splits $0 instead

         TRE - variable. If it is set to not empty string, splitting is
         made by default for all input strings.

         For example:
         tokenre("print \"Hello world!\"", "\"([^\"]|\\\")*\"|[[:alnum:]_]+")
         | NF == 2
         | $1 == print
         | $2 == "Hello world!"

      str2regexp.awk

         str2regex(STRING)
         returns a regular expression that matches given STRING

         For example:
         print str2regexp("all special symbols: ^$(){}[].*+?|\\")
         -| all special symbols: [^][$][(][)][{][}][[]\][.][*][+][?][|]\\

      multisub.awk

         multisub(STRING, SUBST_REPLS)
         `multisub' is a substitution function. It searches for
         a list of substrings, specified in SUBST_REPL
         in a left-most longest order and (if found) replaces
         found fragments with appropriate replacement.
         SUBST_REPL format: "SUBSTRING1:REPLACEMENT1   SUBSTRING2:REPLACEMENT2...".
         Three spaces separate substring:replacement pairs from each other.

         For example:
         print multisub("ABBABBBBBBAAB", "ABB:c   BBA:d   AB:e")
         |- ccBBde

    new target 'test_all' runs tests for all available
    awk interpreters

======================================================================
Version 0.10.1, by Aleksey Cheusov, Fri,  1 Feb 2008 21:25:48 +0200

    FIXED: If AWK interpreter segfaults or killed by any other signal,
    runawk exits with exit status 0.  Affected runawk versions: all.
    Now this is fixed and runawk exits with exit status 128+SIGNAL
    just like many shells.

    EXIT STATUS section has been added to the manual page.

======================================================================
Version 0.10.0, by Aleksey Cheusov, Wed, 23 Jan 2008 00:38:31 +0200

    ADDED: The environment variable RUNAWK_AWKPROG overrides
    the default awk interpreter which is set at compile time.
    Documentation updated accordingly.

    FIXED: unsafe use of strdup(3)

    I've copied MIT License text to code from www.opensource.org.
    Do you see any difference?

    ADDED: new trivial module pow.awk that implements function "pow"

    fix: MKMAN and MKCATPAGES make's standard variables are checked
    during installation

    In order to build runawk not in a directory you can either build
    it like this (standard way)
        cd /src/dir; make all install MAKEOBJDIR=/obj/dir
    or like this
        cd /obj/dir; make -f /src/dir/Makefile all install

    optional config.h is #included if you need it

    other minor fixes and improvements both in code and documentation

======================================================================
Version 0.9.0, by Aleksey Cheusov, Sun, 23 Dec 2007 22:20:23 +0200

    I switched to BSD make. I really hate automake and its approach in
    general. I'm not expert in BSD, but their 'make' looks much
    better. But using it makes some changes in building process, see
    README/INSTALLATION section for a brief description.

    ADDED: man page for runawk. HTML version runawk.html can also be
    generated from runawk.pod using pod2html, see Makefile.

    ADDED: -i/-I options for forcing/disabling adding /dev/stdin to
    the list of awk arguments. See man page for more information.

    A few AWK modules are installed to PREFIX/share/runawk: abs.awk,
    min.awk, max.awk and alt_assert.awk. This directory is also checked
    while searching for modules. See man page for more details.

    AWK_PROG and STDIN_FILENAME Makefile variables can be passed to make
    program to change a path to an actual AWK interpreter (/usr/bin/awk
    by default) and stdin file (/dev/stdin by default).

    Lots of improvements in documentation

    ADDED: regression tests. Run them by running 'make test' and let
    me know if somethiung fails.

    debugging output is sent stdout, not stderr

    ADDED: long synonyms for short options, --help, --version etc.

    clean-ups in Makefile

    options handling improvements

======================================================================
Version 0.8.1, by Aleksey Cheusov, Wed, 24 Oct 2007 14:46:12 +0300

    FIXED: default stdin file should be /std/stdin, not /dev/stderr,
    I've made a typo.

======================================================================
Version 0.8.0, by Aleksey Cheusov, Sun, 21 Oct 2007 17:19:46 +0300

    FIXED: return code of execvp is not analysed, i.e. when running
    an interpreter fails, runawk silently exits with zero exit status.
    Now it fails with exit status 1 and print an error to stderr.

    stdin filename defaults to "/dev/stdin"

    ROOT variable in Makefile has been renamed
    to more commonly used PREFIX

    realloc(2) is not used anymore. arrays[ARRAY_SZ] are used now.

    AWK and STDIN_FILENAME variables are removed from Makefile.
    Use CPPFLAGS for changing defaults.

======================================================================
Version 0.7.0, by Aleksey Cheusov, Sat, 22 Sep 2007 02:30:26 +0300

    First publicly available release.

    See README for a documentation
======================================================================
