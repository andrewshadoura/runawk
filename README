======================================================================

runawk - small wrapper for AWK interpreter that impements module
system and helps to write standalone AWK programs.

======================================================================

Under UNIX-like OS-es you can use runawk
by beginning your script with

   #!/usr/local/bin/runawk

line or something like this instead of

   #!/usr/bin/awk -f

or similar.

------------------------------------------------------------
Modules are enabled like this

  #use "module1.awk"
  #use "module2.awk"

that is the line that specifies module name is treated as a comment line
by normal AWK interpreter but is processed by runawk especially.

Note that #use should begin with column 0,
no spaces are allowed before it.

Also note that AWK modules can also "use" another modules and so forth.
All them are collected in a depth-first order
and each one is added to the list of
awk interpreter arguments prepanded with -f option.
That is "#use" directive is *NOT* like #include directive in C language,
module's code is not included to the main program file.
Runawk's modules are more like to Perl's "use" command.

Also note that modules are added to the list of arguments only once,
i.e. with no duplications.

Position of #use directive in a source file doesn't matter.

Example:

  file prog:
     #!/usr/local/bin/runawk

     #use "A.awk"
     #use "B.awk"
     #use "E.awk"

     PROG code
     ...

  file B.awk:
     #use "A.awk"
     #use "C.awk"
     B code
     ...

  file C.awk:
     #use "A.awk"
     #use "D.awk"

     C code
     ...

  A.awk and D.awk don't contain #use directive

If you run

  runawk prog file1 file2

  or

  /path/to/prog file1 file2

the following command

  awk -f A.awk -f D.awk -f C.awk -f B.awk -f E.awk -f prog -- file1 file2

will actually run.

------------------------------

In order to pass arguments to AWK script correctly, runawk
treats their arguments beginning with `-' sign especially.
The following command

  runawk prog2 -h -f=file -o=output file1 file2

  or

  /path/to/prog2 -h -f=file -o=output file1 file2

will actually run

  awk -f prog2 -- -x -f=file -o=output file1 file2

and therefore -s, -f, -o option will be passed to ARGV/ARGC variables
together with file1 and file2. When all arguments begin with `-',
stdin stream is added to the end of argument list, that is running

  runawk prog3 --value=value

  or

  /path/to/prog3 --value=value

the following 

  awk -f prog3 -- --value=value -

will be run.

------------------------------------------------------------

Runawk can obtain the script from a command line like this

/path/to/runawk -e '
#use "assert.awk"

{
  assert($1 >= 0 && $1 <= 10, "Bad value: " $1)
}'

------------------------------------------------------------

For some reason you may prefer one AWK interpreter or another like this.

  file prog:
     #!/usr/local/bin/runawk

     #use "A.awk"
     #use "B.awk"

     #interp "/usr/pkg/bin/nbawk"

     PROG code

The reason may be efficiency for a particular task, useful
and non-standard extension or enything else.

Note that #interp directive should also begin with column 0,
no spaces are allowed before it.

======================================================================
